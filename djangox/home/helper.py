from typing import List
from fuzzywuzzy import fuzz

import requests
from django.db.models import Q

from .models import Page


def _get_query_set(q: str):
    """Generates the Q model from the query given
    Returns the ``django.db.models.Q`` object.
    the Q object is generated by using OR on space seperated
    keywords of query
    TODO: add the functionality for AND, NOT in Q objects
    """

    q = q.split(' ')
    ret = Q()
    for i in q:
        ret = ret | Q(content__search=i)
    return ret

def get_search_results(query: str):
    """This is a helper function that returns the search
    result of the query over the Page model.
    This function returns a queryset that contains all the Page results
    """

    return Page.objects.filter(_get_query_set(query))


def get_suggestions(word: str) -> List[str]:
    word = word.strip().lower()
    ret = [word]
    if not word:
        return ret
    url = f'http://101.53.145.85:5000/Service1.svc/PunjabiNames/{word}/'
    try:
        r = requests.get(url, headers={}, data={}, timeout=30)
        ret += r.text.strip().split('\t')
        ret = [i.strip().lower() for i in ret]
    except Exception as e:
        print(e)
    return ret

def fuzzy_search(query: str, threshold: int = 70):
    pages = Page.objects.all()
    results = []
    for page in pages:  
        for word in page.words.all():
            if fuzz.partial_ratio(query.lower(), word.text.lower()) >= threshold:
                results.append(page)
                break
    return list(set(results))